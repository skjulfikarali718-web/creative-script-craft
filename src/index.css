@tailwind base;
@tailwind components;
@tailwind utilities;

/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. 
All colors MUST be HSL.
*/

@layer base {
  :root {
    --background: 240 15% 6%;
    --foreground: 280 10% 95%;

    --card: 240 10% 10%;
    --card-foreground: 280 10% 95%;

    --popover: 240 10% 12%;
    --popover-foreground: 280 10% 95%;

    --primary: 280 85% 65%;
    --primary-foreground: 0 0% 100%;
    --primary-glow: 320 90% 75%;

    --secondary: 260 80% 55%;
    --secondary-foreground: 0 0% 100%;

    --muted: 240 10% 18%;
    --muted-foreground: 240 5% 60%;

    --accent: 200 90% 60%;
    --accent-foreground: 0 0% 100%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 100%;

    --border: 240 10% 20%;
    --input: 240 10% 15%;
    --ring: 280 85% 65%;

    --radius: 1rem;

    /* Custom gradient tokens */
    --gradient-primary: linear-gradient(135deg, hsl(280 85% 65%) 0%, hsl(320 90% 75%) 100%);
    --gradient-secondary: linear-gradient(135deg, hsl(260 80% 55%) 0%, hsl(200 90% 60%) 100%);
    --gradient-bg: linear-gradient(180deg, hsl(240 15% 6%) 0%, hsl(240 20% 10%) 100%);
    --gradient-card: linear-gradient(135deg, hsl(240 10% 10% / 0.8) 0%, hsl(260 15% 15% / 0.6) 100%);
    
    /* Shadow with glow */
    --shadow-glow: 0 0 40px hsl(280 85% 65% / 0.3);
    --shadow-card: 0 8px 32px hsl(240 15% 6% / 0.5);

    /* Animation */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    background: var(--gradient-bg);
    background-attachment: fixed;
  }

  /* Glassmorphic card effect */
  .glass-card {
    background: var(--gradient-card);
    backdrop-filter: blur(20px);
    border: 1px solid hsl(var(--border) / 0.3);
    box-shadow: var(--shadow-card);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .glass-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px hsl(240 15% 6% / 0.6), var(--shadow-glow);
    border-color: hsl(var(--border) / 0.5);
  }

  /* Gradient button */
  .gradient-btn {
    background: var(--gradient-primary);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .gradient-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, hsl(0 0% 100% / 0.2), transparent);
    transition: left 0.5s ease;
  }

  .gradient-btn:hover::before {
    left: 100%;
  }

  .gradient-btn:hover {
    filter: brightness(1.15);
    box-shadow: var(--shadow-glow);
    transform: translateY(-1px);
  }

  .gradient-btn:active {
    transform: translateY(0px);
  }

  /* Glow effect */
  .glow {
    box-shadow: var(--shadow-glow);
  }

  /* Interactive elements */
  .hover-lift {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hover-lift:hover {
    transform: translateY(-2px);
  }

  .hover-scale {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hover-scale:hover {
    transform: scale(1.02);
  }

  /* Shimmer effect */
  .shimmer {
    background: linear-gradient(
      90deg,
      hsl(var(--muted)) 0%,
      hsl(var(--primary) / 0.1) 50%,
      hsl(var(--muted)) 100%
    );
    background-size: 200% 100%;
    animation: shimmer 2.5s linear infinite;
  }

  /* Smooth scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: hsl(var(--muted));
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb {
    background: hsl(var(--primary));
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--primary-glow));
  }
}
